import BTree
import HuffmanCoding

main = do
    let aTreeString = "BTree ('\\NUL',380) (BTree ('\\NUL',147) (BTree ('\\NUL',69) (BTree ('\\NUL',34) (BTree ('h',17) EmptyBTree EmptyBTree) (BTree ('a',17) EmptyBTree EmptyBTree)) (BTree ('t',35) EmptyBTree EmptyBTree)) (BTree ('\\NUL',78) (BTree ('\\NUL',38) (BTree ('\\NUL',18) (BTree ('c',9) EmptyBTree EmptyBTree) (BTree ('\\NUL',9) (BTree ('\\NUL',4) (BTree ('\\NUL',2) (BTree ('x',1) EmptyBTree EmptyBTree) (BTree ('v',1) EmptyBTree EmptyBTree)) (BTree ('\\NUL',2) (BTree ('W',1) EmptyBTree EmptyBTree) (BTree ('T',1) EmptyBTree EmptyBTree))) (BTree ('m',5) EmptyBTree EmptyBTree))) (BTree ('i',20) EmptyBTree EmptyBTree)) (BTree ('\\NUL',40) (BTree ('\\NUL',20) (BTree ('w',10) EmptyBTree EmptyBTree) (BTree ('u',10) EmptyBTree EmptyBTree)) (BTree ('\\NUL',20) (BTree ('l',10) EmptyBTree EmptyBTree) (BTree ('\\NUL',10) (BTree ('S',5) EmptyBTree EmptyBTree) (BTree (',',5) EmptyBTree EmptyBTree)))))) (BTree ('\\NUL',233) (BTree ('\\NUL',101) (BTree ('\\NUL',45) (BTree ('o',21) EmptyBTree EmptyBTree) (BTree ('\\NUL',24) (BTree ('d',12) EmptyBTree EmptyBTree) (BTree ('\\NUL',12) (BTree ('f',6) EmptyBTree EmptyBTree) (BTree ('.',6) EmptyBTree EmptyBTree)))) (BTree ('\\NUL',56) (BTree ('\\NUL',25) (BTree ('\\NUL',12) (BTree ('\\NUL',6) (BTree ('y',3) EmptyBTree EmptyBTree) (BTree ('k',3) EmptyBTree EmptyBTree)) (BTree ('\\NUL',6) (BTree ('I',3) EmptyBTree EmptyBTree) (BTree ('3',3) EmptyBTree EmptyBTree))) (BTree ('\\NUL',13) (BTree ('\\NUL',6) (BTree ('2',3) EmptyBTree EmptyBTree) (BTree ('1',3) EmptyBTree EmptyBTree)) (BTree ('p',7) EmptyBTree EmptyBTree))) (BTree ('e',31) EmptyBTree EmptyBTree))) (BTree ('\\NUL',132) (BTree ('\\NUL',64) (BTree ('\\NUL',31) (BTree ('\\NUL',15) (BTree ('\\NUL',7) (BTree ('\\NUL',3) (BTree ('A',1) EmptyBTree EmptyBTree) (BTree ('g',2) EmptyBTree EmptyBTree)) (BTree ('b',4) EmptyBTree EmptyBTree)) (BTree ('\\'',8) EmptyBTree EmptyBTree)) (BTree ('r',16) EmptyBTree EmptyBTree)) (BTree ('\\NUL',33) (BTree ('n',16) EmptyBTree EmptyBTree) (BTree ('s',17) EmptyBTree EmptyBTree))) (BTree (' ',68) EmptyBTree EmptyBTree)))"
        aHuffmanCode = "[R,L,R,L,L,R,L,R,R,R,L,R,R,L,L,L,L,L,R,R,R,L,R,R,R,R,R,L,R,L,R,R,R,L,R,L,R,R,R,L,L,L,R,R,R,R,L,R,L,L,L,R,L,L,L,L,R,R,L,R,R,L,R,L,R,R,L,R,R,R,L,R,L,R,R,R,R,L,L,L,R,R,R,L,R,R,R,R,R,L,L,L,L,R,L,L,L,L,R,L,L,R,R,R,L,R,R,R,R,R,L,L,R,R,R,L,L,R,R,L,R,L,L,L,L,L,R,L,R,R,R,L,R,L,R,R,L,L,L,L,L,R,R,R,R,L,L,R,R,L,L,L,R,R,R,R,L,L,R,R,L,L,R,L,R,L,R,L,L,R,L,L,L,R,R,R,L,L,R,L,L,L,L,R,L,R,R,L,R,L,R,R,R,L,L,R,R,R,R,R,L,R,L,L,R,L,R,R,L,R,L,L,L,R,R,L,R,R,R,R,L,L,R,R,R,L,R,L,R,L,R,R,L,L,R,R,R,R,L,R,L,L,L,R,L,L,L,R,R,L,R,L,R,R,L,R,L,R,L,R,R,L,R,L,L,L,L,L,R,L,R,L,R,R,L,L,L,R,R,L,R,L,R,L,L,R,R,R,R,R,R,L,R,L,L,R,L,R,R,L,L,L,L,R,L,R,R,R,R,R,L,L,L,L,L,R,R,L,R,R,R,L,R,R,R,R,L,L,L,L,R,L,L,L,R,R,R,L,R,L,R,L,L,R,L,R,R,R,L,R,L,L,L,L,L,L,R,L,R,R,R,L,L,R,R,R,L,R,L,R,R,R,L,L,R,L,R,R,R,R,L,L,L,L,R,R,L,R,L,L,R,R,R,R,L,L,R,R,L,L,L,R,R,R,L,L,L,L,L,R,L,R,R,R,L,R,R,R,R,R,L,R,R,L,L,L,R,L,R,R,L,L,R,R,L,R,L,R,R,R,R,R,L,R,L,R,R,R,L,R,L,R,R,R,L,L,R,L,L,L,L,R,L,R,R,R,R,R,R,L,L,L,L,L,R,L,L,L,L,R,L,R,R,R,R,L,L,R,R,R,R,R,R,L,L,R,R,L,L,L,R,L,L,L,L,R,L,L,R,R,R,R,R,R,L,L,R,R,L,R,L,L,L,R,R,L,L,R,R,R,R,L,L,R,L,L,L,L,R,L,R,R,R,R,R,L,R,L,L,L,R,L,L,L,L,R,L,L,R,R,R,L,R,L,R,R,L,R,R,L,R,L,L,R,R,L,R,R,R,R,L,L,R,R,R,R,R,L,R,L,R,R,L,L,L,R,R,R,L,R,R,R,R,L,R,R,L,R,R,L,L,R,L,L,L,R,R,L,L,R,R,L,L,R,L,R,L,L,R,R,R,R,R,R,R,R,L,L,L,R,L,R,R,R,R,L,L,L,R,L,L,L,R,R,R,L,L,R,L,L,R,R,R,R,L,R,R,L,L,L,R,L,R,L,L,R,L,L,L,L,R,R,R,L,L,L,R,R,R,R,L,R,L,L,L,L,L,L,R,R,L,R,L,R,R,L,R,L,R,L,L,R,L,L,L,R,L,R,R,R,L,R,R,R,L,R,R,R,R,L,L,R,R,R,R,R,R,R,R,L,L,R,L,L,L,L,R,L,R,R,R,R,L,R,L,R,R,R,R,L,R,L,R,L,R,R,L,R,L,R,L,L,R,L,R,L,L,R,R,L,R,R,R,R,R,R,R,L,L,L,R,R,R,R,R,R,L,R,R,L,L,L,L,R,L,R,R,R,R,R,R,R,L,R,R,L,L,L,L,R,L,L,L,L,R,R,L,R,L,L,R,R,L,R,R,R,L,L,R,L,R,R,R,R,R,L,L,L,L,R,L,L,L,R,L,R,L,L,L,R,L,R,L,L,L,R,R,L,L,R,R,R,R,R,R,L,R,L,L,R,L,R,L,R,L,R,R,R,R,R,L,L,R,R,R,L,L,R,L,R,L,R,R,L,R,R,R,L,L,R,L,R,R,R,L,R,R,R,R,L,R,L,R,L,R,L,R,R,L,R,L,R,L,L,R,L,R,L,L,R,R,R,R,R,R,R,L,R,R,R,L,R,R,L,R,L,L,R,L,L,R,R,L,R,R,R,R,L,L,R,L,L,L,R,L,R,R,R,L,R,R,R,L,L,R,L,R,L,R,L,R,L,L,R,R,R,L,R,R,R,R,L,R,R,L,R,R,R,R,R,R,R,R,R,R,L,L,L,L,R,L,R,R,L,R,L,L,R,R,R,R,L,R,L,R,L,L,R,R,R,R,R,L,L,R,L,L,R,L,R,R,L,L,R,L,R,R,L,R,L,R,R,L,L,L,R,L,L,R,R,R,R,L,R,R,L,L,R,L,L,L,R,R,L,L,R,R,L,R,L,L,L,R,R,L,L,R,R,R,R,R,R,L,R,R,R,R,L,R,L,L,L,R,R,R,L,R,R,L,L,R,L,R,R,R,R,R,L,R,L,L,L,L,L,L,R,L,R,R,R,L,L,R,R,R,L,R,L,R,R,R,L,L,R,L,R,R,R,L,L,R,L,L,L,L,R,L,R,R,R,R,R,L,R,R,L,L,L,R,L,R,R,L,L,R,R,L,R,L,R,R,R,R,R,L,R,L,R,R,R,L,R,L,R,L,L,R,R,R,R,R,R,R,R,L,L,L,L,L,L,R,R,L,R,R,R,R,R,R,R,L,R,R,L,L,L,L,R,L,R,R,R,R,R,L,R,L,R,R,R,L,R,L,R,L,R,L,R,R,L,R,R,L,R,L,L,R,R,R,R,L,L,R,L,L,L,L,R,L,R,R,R,R,R,R,L,R,L,R,R,L,L,L,R,R,R,L,R,R,R,R,L,R,R,L,R,R,L,L,R,L,L,L,R,R,L,L,R,R,L,L,R,L,L,R,R,R,R,R,R,R,R,R,R,L,R,R,L,L,L,L,R,L,R,R,R,R,R,L,R,L,L,R,R,L,R,R,L,R,L,L,R,L,L,R,R,L,R,R,R,R,L,L,R,R,L,R,R,R,L,L,R,L,L,R,R,R,R,R,R,R,R,R,R,L,L,L,R,R,L,R,L,L,R,L,R,R,R,R,R,L,L,R,R,L,R,R,L,L,L,R,L,R,R,R,L,L,R,R,R,L,R,L,R,L,L,L,L,R,R,R,R,L,L,R,L,R,L,L,L,R,R,L,R,L,R,R,L,L,L,R,L,L,R,R,R,R,R,L,R,L,L,L,R,R,R,L,R,L,R,L,L,L,L,R,R,L,L,R,R,R,L,R,R,L,L,L,L,L,L,L,L,L,R,L,L,R,R,R,L,L,L,R,R,R,L,R,R,R,R,R,R,R,L,R,R,R,L,L,L,R,R,R,R,L,L,R,L,L,R,L,R,R,L,L,R,R,L,R,L,L,R,R,L,L,R,L,R,L,R,L,L,L,L,R,R,L,R,L,R,R,R,L,L,L,R,R,R,R,L,L,L,R,R,R,L,L,L,L,R,R,L,L,L,L,R,R,L,R,L,L,R,R,R,R,L,L,R,R,L,R,L,L,L,L,R,L,R,L,R,R,L,R,L,R,R,R,L,R,L,R,R,L,L,L,L,L,R,R,R,R,L,R,R,R,R,L,L,L,R,L,L,L,R,R,R,L,L,R,L,L,R,R,L,R,L,R,L,R,R,L,R,L,R,L,L,R,L,R,L,L,R,R,R,L,L,R,R,R,R,R,L,L,L,R]"
        aMessage = fromHuffmanCode aTreeString aHuffmanCode
    putStrLn "The structure of aTreeString is shown below:"
    putStrLn (showBTree (read aTreeString :: BTree (Char, Int)))
    putStrLn "The uncompressed message is:"
    putStrLn aMessage

